import datetime
import logging
import os
import time

import pytest

from zmail.exceptions import InvalidArguments
from zmail.info import get_supported_server_info
from zmail.server import MailServer, POPServer, SMTPServer

logger = logging.getLogger('zmail')


@pytest.fixture
def mail_server_config(accounts) -> dict:
    if not accounts:
        pytest.skip('Can not get accounts')

    account = accounts[0]
    username = account[0]
    password = account[1]

    auto_generate_config = get_supported_server_info(username)

    # Ignore IMAP config.
    auto_generate_config = {k: v for k, v in auto_generate_config.items() if 'imap' not in k}

    auto_generate_config.update(username=username, password=password)

    return auto_generate_config


@pytest.fixture
def mail_server(mail_server_config: dict) -> MailServer:
    return MailServer(**mail_server_config)


def test_initiate_server(mail_server_config):
    config = mail_server_config
    server = MailServer(**config)
    for k, v in config.items():
        assert getattr(server, k) is v

    assert isinstance(server.smtp_server, SMTPServer)
    assert isinstance(server.pop_server, POPServer)
    assert server.log is logger

    # Test user-defined arguments.
    config_defined = config.copy()
    mock_logger = logging.Logger('mock')
    config_defined.update(timeout=30, debug=True, log=mock_logger, auto_add_from=False,
                          auto_add_to=False)
    server_defined = MailServer(**config_defined)
    assert server_defined.timeout == 30
    assert server_defined.debug is True
    assert server_defined.log is mock_logger
    assert server_defined.auto_add_from is False
    assert server_defined.auto_add_to is False

    with pytest.raises(InvalidArguments):
        config_with_error_logger = config.copy()
        config_with_error_logger.update(log=NotImplemented)
        MailServer(**config_with_error_logger)

    with pytest.raises(InvalidArguments):
        config_with_error_timeout = config.copy()
        config_with_error_timeout.update(timeout=NotImplemented)
        MailServer(**config_with_error_timeout)


def test_smtp_able_and_pop_able(mail_server: MailServer):
    assert mail_server.smtp_able()
    assert mail_server.pop_able()


def test_stat(mail_server: MailServer):
    stat = mail_server.stat()

    assert isinstance(stat, tuple)
    assert isinstance(stat[0], int)
    assert isinstance(stat[1], int)


def test_send_and_get(mail_server: MailServer, here):
    datetime_stamp = str(datetime.datetime.now())
    mail_as_dict = {
        'subject': '新测试邮件test! ' + datetime_stamp,
        'content_text': ['测试内容1_1\r\n', '测试内容1_2'],
        'content_html': '<html> \n<body>\n <h1>标题</h1>\n</body>',
        'from': 'ZMAIL测试',
        'to': 'ZMAIL测试',
        'attachments': [os.path.join(here, '图标.ico'), os.path.join(here, 'favicon.ico')]
    }

    parsed_attachments = [('图标.ico',
                           b'\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00 \x00h\x04\x00\x00\x16\x00\x00\x00(\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                          ('favicon.ico',
                           b'\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00 \x00h\x04\x00\x00\x16\x00\x00\x00(\x00\x00\x00\x10\x00\x00\x00 \x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xff\xff\xff\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')]

    # Test send and get_mail().
    now_latest_num = mail_server.stat()[0]
    mail_server.send_mail(mail_server.username, mail_as_dict)
    t = 0
    while True:
        if now_latest_num < mail_server.stat()[0]:
            mail_receive = mail_server.get_mail(now_latest_num + 1)
            break
        else:
            t += 1
            if t == 120:
                raise TimeoutError('Test timeout({}s).'.format(t * 0.5))
            time.sleep(0.5)
    for k in mail_as_dict:
        if k != 'attachments':
            assert mail_receive[k] == mail_receive[k]
        else:
            assert mail_receive[k] == parsed_attachments

    # Test get_latest()
    assert mail_server.get_latest() == mail_server.get_mail(now_latest_num + 1)

    # Test get_mails()
    mail_receive = mail_server.get_mails(subject=mail_as_dict['subject'],
                                         start_time='1970-1-1', end_time='2200-1-1',
                                         sender='ZMAIL测试')[0]

    mail_receive_with_index = mail_server.get_mails(subject=mail_as_dict['subject'],
                                                    start_time='1970-1-1', end_time='2200-1-1',
                                                    sender='ZMAIL测试', start_index=now_latest_num)[0]

    assert mail_receive == mail_receive_with_index

    for k in mail_as_dict:
        if k != 'attachments':
            assert mail_receive[k] == mail_receive[k]
        else:
            assert mail_receive[k] == parsed_attachments

    with pytest.raises(InvalidArguments):
        mail_server.get_mails(start_time=b'test')
    with pytest.raises(InvalidArguments):
        mail_server.get_mails(end_time=b'test')
    with pytest.raises(InvalidArguments):
        mail_server.get_mails(start_time=b'test', end_time=b'test')

    # Test delete()
    assert mail_server.delete(mail_receive['id'])
    assert mail_server.stat()[0] < mail_receive['id'] or mail_server.get_mail(mail_receive['id']) != mail_receive


def test_send_cc(mail_server: MailServer):
    mail_as_dict = {
        'subject': 'test_cc',
        'content_text': ['测试内容1_1\r\n', '测试内容1_2'],
    }

    now_latest_num = mail_server.stat()[0]
    mail_server.send_mail(mail_server.username, mail_as_dict, cc=mail_server.username)
    t = 0
    while True:
        if now_latest_num < mail_server.stat()[0]:
            mail_receive = mail_server.get_mail(now_latest_num + 1)
            break
        else:
            t += 1
            if t == 120:
                raise TimeoutError('Test timeout({}s).'.format(t * 0.5))
            time.sleep(0.5)

    for k in mail_as_dict:
        assert mail_receive[k] == mail_receive[k]

    assert mail_receive['headers']['Cc'] == '<{}>'.format(mail_server.username)
    mail_server.delete(mail_receive['id'])


def test_resend(mail_server: MailServer, here):
    mail_as_dict = {'subject': str(datetime.datetime.now()),
                    'attachments': os.path.join(here, 'favicon.ico'),
                    'content_text': ['111', '222'],
                    'content_html': ['222', '333']}
    # Send first mail.
    now_latest_num = mail_server.stat()[0]
    mail_server.send_mail(mail_server.username, mail_as_dict)
    t = 0
    while True:
        if now_latest_num < mail_server.stat()[0]:
            mail_receive = mail_server.get_mail(now_latest_num + 1)
            break
        else:
            t += 1
            if t == 120:
                raise TimeoutError('Test timeout({}s).'.format(t * 0.5))
            time.sleep(0.5)

    # Send received mail.
    now_latest_num = mail_server.stat()[0]
    mail_server.send_mail(mail_server.username, mail_receive)
    t = 0
    while True:
        if now_latest_num < mail_server.stat()[0]:
            mail_receive_next = mail_server.get_mail(now_latest_num + 1)
            break
        else:
            t += 1
            if t == 120:
                raise TimeoutError('Test timeout({}s).'.format(t * 0.5))
            time.sleep(0.5)
    for k in ('subject', 'from', 'content_text', 'content_html', 'attachments'):
        assert mail_receive[k] == mail_receive_next[k], k  # TODO:Add 'to'

    # Delete these mails.
    mail_server.delete(mail_receive_next['id'])
    mail_server.delete(mail_receive['id'])


def test_all_account_smtp_and_pop_able(accounts):
    if not accounts:
        pytest.skip('Can not get accounts')

    for account in accounts:
        username = account[0]
        password = account[1]

        auto_generate_config = get_supported_server_info(username)

        # Ignore IMAP config.
        auto_generate_config = {k: v for k, v in auto_generate_config.items() if 'imap' not in k}

        auto_generate_config.update(username=username, password=password)

        server = MailServer(**auto_generate_config)

        assert server.smtp_able()
        assert server.pop_able()
